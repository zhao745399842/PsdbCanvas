/******/
(function (modules) { // webpackBootstrap
    /******/ 	// The module cache
    /******/
    var installedModules = {};
    /******/
    /******/ 	// The require function
    /******/
    function __webpack_require__(moduleId) {
        /******/
        /******/ 		// Check if module is in cache
        /******/
        if (installedModules[moduleId])
        /******/            return installedModules[moduleId].exports;
        /******/
        /******/ 		// Create a new module (and put it into the cache)
        /******/
        var module = installedModules[moduleId] = {
            /******/            i: moduleId,
            /******/            l: false,
            /******/            exports: {}
            /******/        };
        /******/
        /******/ 		// Execute the module function
        /******/
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/
        /******/ 		// Flag the module as loaded
        /******/
        module.l = true;
        /******/
        /******/ 		// Return the exports of the module
        /******/
        return module.exports;
        /******/
    }

    /******/
    /******/
    /******/ 	// expose the modules object (__webpack_modules__)
    /******/
    __webpack_require__.m = modules;
    /******/
    /******/ 	// expose the module cache
    /******/
    __webpack_require__.c = installedModules;
    /******/
    /******/ 	// identity function for calling harmony imports with the correct context
    /******/
    __webpack_require__.i = function (value) {
        return value;
    };
    /******/
    /******/ 	// define getter function for harmony exports
    /******/
    __webpack_require__.d = function (exports, name, getter) {
        /******/
        if (!__webpack_require__.o(exports, name)) {
            /******/
            Object.defineProperty(exports, name, {
                /******/                configurable: false,
                /******/                enumerable: true,
                /******/                get: getter
                /******/            });
            /******/
        }
        /******/
    };
    /******/
    /******/ 	// getDefaultExport function for compatibility with non-harmony modules
    /******/
    __webpack_require__.n = function (module) {
        /******/
        var getter = module && module.__esModule ?
            /******/            function getDefault() {
            return module['default'];
        } :
            /******/            function getModuleExports() {
            return module;
        };
        /******/
        __webpack_require__.d(getter, 'a', getter);
        /******/
        return getter;
        /******/
    };
    /******/
    /******/ 	// Object.prototype.hasOwnProperty.call
    /******/
    __webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
    };
    /******/
    /******/ 	// __webpack_public_path__
    /******/
    __webpack_require__.p = "";
    /******/
    /******/ 	// Load entry module and return exports
    /******/
    return __webpack_require__(__webpack_require__.s = 1);
    /******/
});
    /************************************************************************/
    /******/([
    /* 0 */
    /***/ (function (module, exports) {

        function hell() {
            alert("ddd");
        }

        /***/
    }),
    /* 1 */
    /***/ (function (module, exports, __webpack_require__) {

        __webpack_require__(0);

        /**
         * This class is the main view for the application. It is specified in app.js as the
         * "autoCreateViewport" property. That setting automatically applies the "viewport"
         * plugin to promote that instance of this class to the body element.
         *
         * TODO - Replace this content of this view to suite the needs of your application.
         */
        Ext.define('psdbWeb.view.main.Main', {
            extend: 'Ext.container.Container',
            requires: [
                'psdbWeb.view.main.MainController',
                'psdbWeb.view.main.MainModel'
            ],

            xtype: 'app-main',

            controller: 'main',
            viewModel: {
                type: 'main'
            },

            layout: {
                type: 'border'
            },

            items: [
                {
                    xtype: 'panel',
                    bind: {
                        title: '{name}'
                    },
                    region: 'west',
                    html: '<ul><li>This area is commonly used for navigation, for example, using a "tree" component.</li></ul>',
                    width: 250,
                    split: true,
                    tbar: [
                        {
                            text: 'Button',
                            handler: 'onClickButton'
                        }
                    ]
                },
                {
                    region: 'center',
                    xtype: 'tabpanel',
                    items: [
                        Ext.create("psdbWeb.view.test.SideNavigationTabs")
                    ]
                }
            ]
        });


        /***/
    })
    /******/ ]);